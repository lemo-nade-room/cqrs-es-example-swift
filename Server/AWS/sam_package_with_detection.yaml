version: 0.2

env:
  shell: bash
  exported-variables:
    - SHOULD_DEPLOY

phases:
  install:
    commands:
      - cd Server

  pre_build:
    commands:
      - echo "🔍 Checking if deployment is needed..."
      - |
        # Check if either Command or Query build was skipped
        COMMAND_SKIPPED="${COMMAND_BUILD_SKIPPED:-false}"
        QUERY_SKIPPED="${QUERY_BUILD_SKIPPED:-false}"
        
        echo "Command build skipped: $COMMAND_SKIPPED"
        echo "Query build skipped: $QUERY_SKIPPED"
        
        # Check for infrastructure changes using S3-based detection
        S3_BUCKET="change-detection-bucket-983760593510"
        INFRA_HASH_FILE="last-infra-hash.txt"
        
        # Get last infrastructure hash
        aws s3 cp "s3://${S3_BUCKET}/${INFRA_HASH_FILE}" ./last-infra-hash.txt 2>/dev/null || echo "none" > ./last-infra-hash.txt
        LAST_INFRA_HASH=$(cat ./last-infra-hash.txt)
        
        # Calculate current infrastructure hash
        CURRENT_INFRA_HASH=$(find Server/template.yaml Server/AWS -type f -name "*.yaml" -o -name "*.tf" \
          -not -path "*/.*" -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
        
        echo "Last infra hash: $LAST_INFRA_HASH"
        echo "Current infra hash: $CURRENT_INFRA_HASH"
        
        INFRA_CHANGES=false
        if [ "$LAST_INFRA_HASH" != "$CURRENT_INFRA_HASH" ]; then
          INFRA_CHANGES=true
          echo "🏗️ Infrastructure changes detected"
        else
          echo "✅ No infrastructure changes"
        fi
        
        # Deploy if any service was built or infrastructure changed
        if [ "$COMMAND_SKIPPED" = "false" ] || [ "$QUERY_SKIPPED" = "false" ] || [ "$INFRA_CHANGES" = "true" ]; then
          export SHOULD_DEPLOY=true
          echo "🚀 Deployment needed"
        else
          export SHOULD_DEPLOY=false
          echo "⏭️ No deployment needed - all builds were skipped and no infrastructure changes"
        fi

  build:
    commands:
      - |
        if [ "$SHOULD_DEPLOY" = "true" ]; then
          echo "📦 Packaging SAM application..."
          echo "COMMAND_SERVER_FUNCTION_IMAGE_URI: $COMMAND_SERVER_FUNCTION_IMAGE_URI"
          echo "QUERY_SERVER_FUNCTION_IMAGE_URI: $QUERY_SERVER_FUNCTION_IMAGE_URI"
          
          START_TIME=$(date +%s)
          
          # Use default values if IMAGE_URI is not provided with digest
          if [[ "$COMMAND_SERVER_FUNCTION_IMAGE_URI" != *"@sha256:"* ]] && [[ "$COMMAND_SERVER_FUNCTION_IMAGE_URI" != *":"* ]]; then
            echo "Warning: COMMAND_SERVER_FUNCTION_IMAGE_URI does not contain tag or digest, using :latest"
            COMMAND_SERVER_FUNCTION_IMAGE_URI="${COMMAND_SERVER_FUNCTION_IMAGE_URI}:latest"
          fi
          if [[ "$QUERY_SERVER_FUNCTION_IMAGE_URI" != *"@sha256:"* ]] && [[ "$QUERY_SERVER_FUNCTION_IMAGE_URI" != *":"* ]]; then
            echo "Warning: QUERY_SERVER_FUNCTION_IMAGE_URI does not contain tag or digest, using :latest"
            QUERY_SERVER_FUNCTION_IMAGE_URI="${QUERY_SERVER_FUNCTION_IMAGE_URI}:latest"
          fi
          
          sam package \
            --template-file template.yaml \
            --output-template-file packaged.yaml \
            --image-repositories CommandServerFunction=$COMMAND_SERVER_FUNCTION_IMAGE_URI \
            --image-repositories QueryServerFunction=$QUERY_SERVER_FUNCTION_IMAGE_URI
          
          END_TIME=$(date +%s)
          PACKAGE_TIME=$((END_TIME - START_TIME))
          echo "⏱️ SAM package completed in ${PACKAGE_TIME} seconds"
          
          # Save infrastructure hash if packaging succeeded
          echo "$CURRENT_INFRA_HASH" > ./current-infra-hash.txt
          aws s3 cp ./current-infra-hash.txt "s3://${S3_BUCKET}/${INFRA_HASH_FILE}"
        else
          echo "⏭️ Skipping SAM package as no deployment is needed"
          # Create empty packaged.yaml to satisfy artifacts
          echo "# No deployment needed" > packaged.yaml
        fi

artifacts:
  base-directory: Server
  files:
    - packaged.yaml