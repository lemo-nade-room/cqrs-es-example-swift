AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CQRS ES Example Swift

Globals:
  Function:
    Architectures:
      - arm64
    Timeout: 10
    MemorySize: 128
    Tracing: Active
    LoggingConfig:
      ApplicationLogLevel: DEBUG
      LogFormat: JSON
Parameters:
  CommandServerFunctionImageUri:
    Type: String
    Description: ECR URI for Command
  QueryServerFunctionImageUri:
    Type: String
    Description: ECR URI for Query
  ServerEnvironment:
    Type: String
    Description: Serverの環境（Staging)
Resources:
  ServerHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: CQRS ES Example Swift Server
      StageName: Stage
  CommandServerFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: !Ref CommandServerFunctionImageUri
      # Layerはコンテナイメージでは使用できないため、
      # X-Rayへの送信はアプリケーション内のOpenTelemetryから直接行います
      Environment:
        Variables:
          SERVER: !Ref ServerEnvironment
          AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
          # CloudWatch Application SignalsのOTLPエンドポイントを使用
          OTEL_EXPORTER_OTLP_ENDPOINT: !Sub https://xray.${AWS::Region}.amazonaws.com
          # X-RayのトレースIDフォーマットを使用
          OTEL_PROPAGATORS: xray
          # VaporのLogLevelをDEBUGに設定
          LOG_LEVEL: DEBUG
          # Application Signals用の設定
          OTEL_METRICS_EXPORTER: none
          OTEL_AWS_APPLICATION_SIGNALS_ENABLED: true
          OTEL_AWS_APPLICATION_SIGNALS_EXPORTER_ENDPOINT: !Sub https://xray.${AWS::Region}.amazonaws.com
          OTEL_RESOURCE_ATTRIBUTES: service.name=CommandServer
      Policies:
        - AWSXRayDaemonWriteAccess
        - Statement:
          - Effect: Allow
            Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              - cloudwatch:PutMetricData
            Resource: '*'
      Events:
        CommandHttpApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref ServerHttpApi
            Method: ANY
            Path: /command/{proxy+}
  QueryServerFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: !Ref QueryServerFunctionImageUri
      # Layerはコンテナイメージでは使用できないため、
      # X-Rayへの送信はアプリケーション内のOpenTelemetryから直接行います
      Environment:
        Variables:
          SERVER: !Ref ServerEnvironment
          AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
          # CloudWatch Application SignalsのOTLPエンドポイントを使用
          OTEL_EXPORTER_OTLP_ENDPOINT: !Sub https://xray.${AWS::Region}.amazonaws.com
          # X-RayのトレースIDフォーマットを使用
          OTEL_PROPAGATORS: xray
          # VaporのLogLevelをDEBUGに設定
          LOG_LEVEL: DEBUG
          # Application Signals用の設定
          OTEL_METRICS_EXPORTER: none
          OTEL_AWS_APPLICATION_SIGNALS_ENABLED: true
          OTEL_AWS_APPLICATION_SIGNALS_EXPORTER_ENDPOINT: !Sub https://xray.${AWS::Region}.amazonaws.com
          OTEL_RESOURCE_ATTRIBUTES: service.name=QueryServer
      Policies:
        - AWSXRayDaemonWriteAccess
        - Statement:
          - Effect: Allow
            Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              - cloudwatch:PutMetricData
            Resource: '*'
      Events:
        QueryHttpApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref ServerHttpApi
            Method: ANY
            Path: /query/{proxy+}

  # X-Ray Trace Segment Destination設定用のカスタムリソース
  UpdateTraceDestinationFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        import json
        import boto3
        import cfnresponse
        
        xray = boto3.client('xray')
        
        def handler(event, context):
            try:
                request_type = event['RequestType']
                
                if request_type in ['Create', 'Update']:
                    # CloudWatch LogsをトレースのデスティネーションとしてUpdateする
                    response = xray.update_trace_segment_destination(
                        TelemetryType='OTEL',
                        State='Active'
                    )
                    print(f"UpdateTraceSegmentDestination response: {response}")
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Message': 'Trace destination updated'})
                else:
                    # Delete時は何もしない
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Message': 'Delete completed'})
            except Exception as e:
                print(f"Error: {str(e)}")
                cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})
      Runtime: python3.12
      Handler: index.handler
      Timeout: 60
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - xray:UpdateTraceSegmentDestination
              Resource: '*'

  # カスタムリソースを実行
  UpdateTraceDestination:
    Type: Custom::UpdateTraceDestination
    Properties:
      ServiceToken: !GetAtt UpdateTraceDestinationFunction.Arn